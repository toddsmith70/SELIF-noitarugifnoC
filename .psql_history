\c test
vacuum full verbose;
analyze verbose ;
exit
\q
select * from pg_database;
\c pgbench
vacuum full verbose;
vacuum full verbose;
\q
\q
\q
\q
\d
\l
\c pgbench
\l
\d
\q
select pg_start_backup('backup');
\q
select pg_start_backup('backup');
\q
select pg_stop_backup();
select pg_start_backup('backup');
select pg_stop_backup();
\q
select pg_stop_backup();
select pg_start_backup('backup');
\q
\q
\q
create user;
\help create  
\q
select pg_stop_backup();
select pg_startbackup();
select pg_start_backup('backup');
\q
\q
\q
\q
\q
\d
\d
\q
\q
\l
create database pgbench;
\q
\l
drop database ;
drop database pgbench;
\q
\l
drop database pgbench;
\q
show parameters;
show parametershow parameter;
show all;
\q
\q
\c
\c emp
\l
ALTER TABLE ONLY financial_institution    ADD CONSTRAINT pk_fi PRIMARY KEY (financialinstitution_id);
\q
CREATE TABLE registration_notification (    registration_notification_id character varying(36) DEFAULT public.gen_uuid() NOT NULL,    card_member_id character varying(36),    status character varying(10),    date_sent timestamp without time zone,    created_timestamp timestamp without time zone DEFAULT now(),    modified_timestamp timestamp without time zone);
ALTER TABLE emfp.registration_notification OWNER TO edoadmin;
\q
create extension plpythonu;
\q
create extension plpythonu;
\q
create extension plpython;
create extension plpythonu;
\q
select * from pg_language;
\q
select * from pg_languagel;
select * from pg_language;
\c emp
select * from pg_language;
\q
drop database emp;
drop database emp;
\q
@empdb.sql;
\l
\q
\q
\q
\q
\l
\q
\l
\q
\q
\q
\q
\q
\q
vacuum FULL -v -all;
vacuum FULL  verbose -all;
vacuum FULL  verbose;
vacuum FULL  verbose emp;
\l
\c emp
vacuum FULL  verbose;
\q
vacuumdb;
\q
vacuum pgbench_branches;
vacuum pgbench.pgbench_branches;
vacuum pgbench_branches;
\l
\c pgbench
vacuum pgbench_branches;
vacuum pgbench_branches;
select * from pgbench_branches;
\q
\q
\q
\q
\q
ls
\l
\q
\kl
\l
\l
\q
\q
\q
\q
\q
select pg_is_in_recovery();
\q
checkpoint;
\q
ls
\l
\q
\q
\l
\c pgbench
\d
truncate pgbench_accounts;
\q
\q
\q
\q
\q
\q
\q
\q
SELECT pg_current_xlog_location();
SELECT pg_current_xlog_location();
\q
\q
vacuum full;
vacuum verbose full;
vacuum full verbose;
\q
\q
\q
\q
\q
show all;
\q
\q
select pg_start_backup('12051');
\q
select * from pg_database;
\q
\q
select pg_start_backup('test');
\q
select pg_stop_backup();
\q
\q
select pg_start_backup('repl1','true');
\q
select pg_stop_backup();
\q
select pg_start_backup('repl2','true');
\q
select pg_stop_backup();
\q
\q
select pg_start_backup('RUN1','true');
\q
\q
select pg_stop_backup():;
select pg_stop_backup();
\q
select pg_start_backup('RUN2','true');
\q
select pg_stop_backup();
pg_ctl stop
\q
q\q
\q
